apply plugin: 'java'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.testng:testng:6.9.10'
    compile "org.seleniumhq.selenium:selenium-java:3.141.59"
    compile "org.hamcrest:java-hamcrest:2.0.0.0"
    compile "com.google.code.gson:gson:2.8.6"
    compile "com.beust:jcommander:1.78"
    compile "mysql:mysql-connector-java:8.0.19"
    compile "org.hibernate:hibernate-core:5.4.12.Final"
}

task generateGroups(type: JavaExec) {
    group = "Test"
    description = "Run generated Groups"
    classpath sourceSets.test.runtimeClasspath
    main = "ru.chibisov.aft.addressbook.generator.GroupDataGenerator"
    args "-c", "3", "-f", "src/test/resources/generated/groups.json"
}

task generateContacts(type: JavaExec) {
    group = "Test"
    description = "Run generated Contacts"
    classpath sourceSets.test.runtimeClasspath
    main = "ru.chibisov.aft.addressbook.generator.ContactDataGenerator"
    args "-c", "3", "-f", "src/test/resources/generated/contacts.json"
}

test {
    useTestNG()
    if (project.hasProperty("browser")) {
        systemProperty "browser", "${browser}"
    } else {
        systemProperty "browser", "chrome"
    }
}

//Пример использования файла с конфигурациями
def props = new Properties()
file("src/test/resources/properties/stand.properties").withInputStream { props.load(it) }

task testExample(type: Test) {
    useTestNG() {
        suites "src/test/resources/suites/suites_group.xml"
    }
    systemProperty "browser", props.getProperty("browser")
}